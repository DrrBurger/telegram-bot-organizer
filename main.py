import asyncio
import json
import logging
import random

from aiogram import Bot, types, exceptions
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.utils import executor

import aiosqlite

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from config_data.config import Config, load_config

from databases.database import create_db

from states.states import Del, Place, Rating


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –±–æ—Ç–∞
config: Config = load_config()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞, —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=config.tg_bot.token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞
allowed_chat = config.tg_bot.allowed_chat_ids
target_chat = config.tg_bot.target_chat_ids


@dp.message_handler(Command(commands=['start', 'help']))
async def help_command(message: types.Message) -> None:
    # –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ '/start' –∏ '/help'
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥
    # –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

    if 'start' in message.text:
        await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä!\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - /help")
        await create_db()  # —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    else:
        help_text = "‚úã–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´!ü§ö\n\n" \
            "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ\n" \
            "/del - –£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n" \
            "/place - –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Å—Ç\n" \
            "/random - –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ\n" \
            "/rating - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Å—Ç—É\n"

        await message.answer(help_text)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


@dp.message_handler(Command('add'))
async def start_cmd_handler(message: types.Message) -> None:
    # –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/add'
    # –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç—É –∫–æ–º–∞–Ω–¥—É,
    # –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —á–∞—Ç—É
    if message.chat.id not in allowed_chat:
        bot_message = await message.answer('üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–∞: "IT –ó–∞–≤—Ç—Ä–∞–∫–∏, –¢–±–∏–ª–∏—Å–∏" üö´')
        await asyncio.sleep(5)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=bot_message.message_id)

        return

    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    bot_message = await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:üëæ")
    await state.update_data(message_id=[message.message_id, bot_message.message_id])  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    await Place.name.set()


@dp.message_handler(state=Place.name)
async def process_name(message: types.Message, state: FSMContext):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã '/add'
    # –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —á—Ç–æ –æ–Ω –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ —á–∞—Ç—É
    # –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞

    async with state.proxy() as data:
        data['name'] = message.text.lower()
        data['message_id'].extend([message.message_id])  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect('places.db') as db:
            cursor = await db.cursor()
            await cursor.execute('SELECT name FROM places WHERE name = ?', (data['name'],))
            result = await cursor.fetchone()

            if result is not None:
                bot_message = await message.answer("‚ùå –≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ! ‚ùå")
                data['message_id'].extend([bot_message.message_id])
                await state.finish()
                await asyncio.sleep(1)
                for msg_id in data['message_id']:
                    await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            else:
                bot_message = await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞:üìç")
                data['message_id'].extend([bot_message.message_id])
                await Place.next()


@dp.message_handler(state=Place.address)
async def process_address(message: types.Message, state: FSMContext):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –º–µ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞
    # –û–Ω —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ –º–µ—Å—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏, –µ—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ

    async with state.proxy() as data:
        data['address'] = message.text
        data['message_id'].extend([message.message_id])  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect('places.db') as db:
            cursor = await db.cursor()
            await cursor.execute('INSERT INTO places (name, address) VALUES (?, ?)', (data['name'], data['address']))
            await db.commit()
            bot_message = await message.answer("‚úÖ –ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ‚úÖ")
            data['message_id'].extend([bot_message.message_id])

    await state.finish()

    # —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 1 —Å–µ–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∑–∞—Ö–ª–∞–º–ª–µ–Ω–∏—è)
    await asyncio.sleep(1)
    for msg_id in data['message_id']:
        await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)


@dp.message_handler(Command('place'))
async def show_places(message: types.Message):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/place', –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    # –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, —Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∑–∞—Ö–ª–∞–º–ª–µ–Ω–∏—è)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    # G–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–¥ –∏ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç —á–µ—Ä–µ–∑ —Ü–∏–∫–ª for
    async with aiosqlite.connect('places.db') as db:
        cursor = await db.cursor()
        await cursor.execute('SELECT * FROM places')
        rows = await cursor.fetchall()
        if not rows:
            await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞! ü§∑üèΩ‚Äç‚ôÇÔ∏è")
        else:
            places_list = 'üëâ–°–ü–ò–°–û–ö –í–°–ï–• –ú–ï–°–¢ –í –ë–ê–ó–ïüëà\n\n'  # C—Ç—Ä–æ–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ—Å—Ç (–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)
            for row in rows:
                places_list += f"–ú–µ—Å—Ç–æ: {row[0]}\n"\
                               f"–ê–¥—Ä–µ—Å: {row[1]}\n"\
                               f"–†–µ–π—Ç–∏–Ω–≥: {row[2]:.1f}\n\n"
            sent_message = await message.answer(places_list)
            await asyncio.sleep(60)  # —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 60 —Å–µ–∫ (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∑–∞—Ö–ª–∞–º–ª–µ–Ω–∏—è)
            await bot.delete_message(chat_id=message.chat.id, message_id=sent_message.message_id)


@dp.message_handler(Command('del'), state="*")
async def start_del_cmd_handler(message: types.Message) -> None:
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/del', —É–¥–∞–ª—è–µ—Ç –º–µ—Å—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –µ–≥–æ ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ,
    # —Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.

    state = dp.current_state(user=message.from_user.id)

    async with state.proxy() as data:
        # C–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        data['messages_to_delete'] = [message.message_id]
        data['attempts'] = 3

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if not await admin_check(message):
            sent_message = await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è! ü§¨")
            data['messages_to_delete'].append(sent_message.message_id)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            await asyncio.sleep(10)

            for msg_id in data['messages_to_delete']:
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
                except exceptions.MessageCantBeDeleted:
                    continue
            return

        sent_message = await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:ü•∏")
        data['messages_to_delete'].append(sent_message.message_id)

    await Del.name.set()


@dp.message_handler(state=Del.name)
async def process_del_name(message: types.Message, state: FSMContext):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã '/del'.
    # –û–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å.
    # –ï—Å–ª–∏ –º–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –≤–≤–æ–¥–∞.
    # –ï—Å–ª–∏ –º–µ—Å—Ç–æ –Ω–∞–π–¥–µ–Ω–æ, –æ–Ω–æ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    async with state.proxy() as data:
        data['messages_to_delete'].append(message.message_id)

        if not await admin_check(message):
            sent_message = await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! ü§¨")
            data['messages_to_delete'].append(sent_message.message_id)

            await asyncio.sleep(1)
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for msg_id in data['messages_to_delete']:
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
                except exceptions.MessageCantBeDeleted:
                    continue
            return

        data['name'] = message.text

        async with aiosqlite.connect('places.db') as db:
            cursor = await db.cursor()
            await cursor.execute('SELECT * FROM places WHERE name = ?', (data['name'],))
            result = await cursor.fetchone()

            if result is None:
                data['attempts'] -= 1
                if data['attempts'] > 0:
                    sent_message = await message.answer(f"‚ùå –ú–µ—Å—Ç–æ '{data['name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: \
                                                        –ø–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å {data['attempts']} ‚ùå")
                    data['messages_to_delete'].append(sent_message.message_id)
                else:
                    sent_message = await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. üí•")
                    data['messages_to_delete'].append(sent_message.message_id)

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    for msg_id in data['messages_to_delete']:
                        try:
                            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
                        except exceptions.MessageCantBeDeleted:
                            continue
                    data['attempt_counter'] = 3  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                    await state.reset_state()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                return

            await cursor.execute('DELETE FROM places WHERE name = ?', (data['name'],))
            await db.commit()

            sent_message = await message.answer("‚úÖ –ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ! ‚úÖ")
            data['messages_to_delete'].append(sent_message.message_id)

            await asyncio.sleep(1)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞
            for msg_id in data['messages_to_delete']:
                try:
                    await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
                except exceptions.MessageCantBeDeleted:
                    continue

            await state.finish()


@dp.message_handler(Command('rating'))
async def start_rating_cmd_handler(message: types.Message):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rating. –û–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥, –ø—Ä–æ—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏
    # –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω —Ö–æ—á–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å.

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —á–∞—Ç—É
    if message.chat.id not in allowed_chat:
        bot_message = await message.answer('üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–∞: "IT –ó–∞–≤—Ç—Ä–∞–∫–∏, –¢–±–∏–ª–∏—Å–∏" üö´')
        await asyncio.sleep(5)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=bot_message.message_id)

        return

    state = dp.current_state(user=message.from_user.id)
    async with state.proxy() as data:
        data['messages_to_delete'] = [message.message_id]
        sent_message = await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É:ü´∂üèª")
        data['messages_to_delete'].append(sent_message.message_id)
    await Rating.name.set()


@dp.message_handler(state=Rating.name)
async def process_rating_name(message: types.Message, state: FSMContext):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞.
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ –º–µ—Å—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –º–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ,
    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–µ—Ç—Å—è –µ—â–µ 2 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –º–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏
    # –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10.

    async with state.proxy() as data:
        data['name'] = message.text.lower()
        data['messages_to_delete'].append(message.message_id)

        if 'attempt_counter' not in data:
            data['attempt_counter'] = 2
        else:
            data['attempt_counter'] -= 1

        async with aiosqlite.connect('places.db') as db:
            cursor = await db.cursor()
            await cursor.execute('SELECT * FROM places WHERE name = ?', (data['name'],))
            place = await cursor.fetchone()
            if place is None:
                if data['attempt_counter'] > 0:
                    sent_message = await message.answer(f"‚ùå –¢–∞–∫–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. \
                                                        –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å {data['attempt_counter']} ‚ùå")
                    data['messages_to_delete'].append(sent_message.message_id)
                else:
                    sent_message = await message.answer("–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏...ü§¶üèº‚Äç‚ôÇÔ∏è")
                    data['messages_to_delete'].append(sent_message.message_id)
                    await asyncio.sleep(1)
                    for msg_id in data['messages_to_delete']:
                        try:
                            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
                        except exceptions.MessageCantBeDeleted:
                            continue
                    data['attempt_counter'] = 3
                    await state.reset_state()
                return
            else:
                data['attempt_counter'] = 3
                sent_message = await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10: ‚ú®")
                data['messages_to_delete'].append(sent_message.message_id)
        await Rating.next()


@dp.message_handler(state=Rating.rating)
async def process_rating(message: types.Message, state: FSMContext):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ü–µ–Ω–∫—É.
    # –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–µ—Ç—Å—è –µ—â–µ 2 –ø–æ–ø—ã—Ç–∫–∏
    # –¥–ª—è –≤–≤–æ–¥–∞. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ü–µ–Ω–∫–∏, –æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    async with state.proxy() as data:
        data['messages_to_delete'].append(message.message_id)

        if 'attempt_counter' not in data:
            data['attempt_counter'] = 2
        else:
            data['attempt_counter'] -= 1

        try:
            data['rating'] = int(message.text)
            if not 1 <= data['rating'] <= 10:
                raise ValueError()
        except ValueError:
            if data['attempt_counter'] > 0:
                sent_message = await message.answer(f"‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10.\
                                                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {data['attempt_counter']}‚ùå")
                data['messages_to_delete'].append(sent_message.message_id)
            else:
                sent_message = await message.answer("–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏...ü§¶üèº‚Äç‚ôÇÔ∏è")
                data['messages_to_delete'].append(sent_message.message_id)
                await asyncio.sleep(1)
                for msg_id in data['messages_to_delete']:
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
                    except exceptions.MessageCantBeDeleted:
                        continue
                data['attempt_counter'] = 3
                await state.reset_state()
            return

        async with aiosqlite.connect('places.db') as db:
            cursor = await db.cursor()
            await cursor.execute('SELECT * FROM places WHERE name = ?', (data['name'],))
            place = await cursor.fetchone()
            if place is None:
                sent_message = await message.answer("–¢–∞–∫–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. ü§∑üèΩ‚Äç‚ôÇÔ∏è")
                data['messages_to_delete'].append(sent_message.message_id)
                await asyncio.sleep(1)
                for msg_id in data['messages_to_delete']:
                    try:
                        await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
                    except exceptions.MessageCantBeDeleted:
                        continue
                await state.reset_state()
                return

            await cursor.execute('INSERT INTO ratings (name, rating) VALUES (?, ?)', (data['name'], data['rating']))
            await cursor.execute('SELECT AVG(rating) FROM ratings WHERE name = ?', (data['name'],))
            avg_rating = await cursor.fetchone()
            await cursor.execute('UPDATE places SET rating = ? WHERE name = ?', (avg_rating[0], data['name']))
            await db.commit()

        sent_message = await message.answer("‚úÖ –†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! ‚úÖ")
        data['messages_to_delete'].append(sent_message.message_id)
        await asyncio.sleep(1)
        for msg_id in data['messages_to_delete']:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except exceptions.MessageCantBeDeleted:
                continue

        await state.finish()


@dp.message_handler(Command('random'))
async def random_place(message: types.Message):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /random
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ
    # –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    async with aiosqlite.connect('places.db') as db:
        cursor = await db.cursor()
        await cursor.execute('SELECT * FROM places')
        rows = await cursor.fetchall()
        if rows:
            random_row = random.choice(rows)
            answer = await message.answer("üëâ–°–õ–£–ß–ê–ô–ù–û–ï –ú–ï–°–¢–û!üëà\n\n"
                                          f"–ù–∞–∑–≤–∞–Ω–∏–µ: {random_row[0]}\n"
                                          f"–ê–¥—Ä–µ—Å: {random_row[1]}\n"
                                          f"–†–µ–π—Ç–∏–Ω–≥: {random_row[2]}\n")
            await asyncio.sleep(20)
            await bot.delete_message(chat_id=message.chat.id, message_id=answer.message_id)
        else:
            await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç. ü§∑üèΩ‚Äç‚ôÇÔ∏è")


@dp.poll_answer_handler()
async def handle_poll_answer(poll_answer: types.PollAnswer):
    # –õ–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å –∏ –∑–∞—Ç–µ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite.
    # –ï—Å–ª–∏ —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –æ–Ω –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤.

    async with aiosqlite.connect('places.db') as db:
        cursor = await db.cursor()

        for option_id in poll_answer.option_ids:
            await cursor.execute('INSERT INTO poll_results (poll_id, option_id, votes) VALUES (?, ?, 1) '
                                 'ON CONFLICT(poll_id, option_id) DO UPDATE SET votes = votes + 1',
                                 (poll_answer.poll_id, option_id))

        await db.commit()


async def admin_check(message: types.Message):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    # –∏–ª–∏ –µ–≥–æ ID –≤–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

    chat_member = await bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
    return chat_member.status in ["creator", "administrator"] or message.from_user.id in config.tg_bot.admin_ids


async def send_poll():
    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–≤—É—Ö –æ–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Ç Telegram.
    # –û–¥–∏–Ω –æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏,
    # –∞ –¥—Ä—É–≥–æ–π –æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞,
    # –∫–æ—Ç–æ—Ä—ã–π –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    async with aiosqlite.connect('places.db') as db:
        cursor = await db.cursor()
        await cursor.execute('SELECT * FROM places ORDER BY RANDOM() LIMIT 7')
        places = await cursor.fetchall()
        place_options = [f"–ú–µ—Å—Ç–æ: {place[0]} | –†–µ–π—Ç–∏–Ω–≥: {place[2]}" for place in places]

    poll_message1 = await bot.send_poll(
        chat_id=-1001646936147,
        question="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:‚è∞",
        options=["–°—É–±–±–æ—Ç–∞ | 11:00", "–°—É–±–±–æ—Ç–∞ | 12:00", "–°—É–±–±–æ—Ç–∞ | 15:00", "–°—É–±–±–æ—Ç–∞ | 16:00", "–°—É–±–±–æ—Ç–∞ | 17:00",
                 "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ | 11:00", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ | 12:00", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ | 15:00", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ | 16:00", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ | 17:00"],
        is_anonymous=False,
        allows_multiple_answers=True,
    )

    poll_message2 = await bot.send_poll(
        chat_id=-1001646936147,
        question="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ:üçî",
        options=[*place_options, '–ü–∞—Ä–∫'],
        is_anonymous=False,
        allows_multiple_answers=True,
    )

    async with aiosqlite.connect('places.db') as db:
        cursor = await db.cursor()

        await cursor.execute('INSERT INTO poll_data (poll_id, options) VALUES (?, ?)',
                             (poll_message1.poll.id, json.dumps([option.text for option in poll_message1.poll.options])))

        await cursor.execute('INSERT INTO poll_data (poll_id, options) VALUES (?, ?)',
                             (poll_message2.poll.id, json.dumps([option.text for option in poll_message2.poll.options])))

        await db.commit()


async def check_poll_results():
    # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤—Å–µ –æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
    # –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø—Ä–æ—Å–∞ (—Ç–æ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –≥–æ–ª–æ—Å–æ–≤),
    # —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.
    # –ó–∞—Ç–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø—Ä–æ—Å–∞—Ö —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    async with aiosqlite.connect('places.db') as db:
        cursor = await db.cursor()

        await cursor.execute('SELECT * FROM poll_data')
        all_polls = await cursor.fetchall()

        results_text = list()

        for poll in all_polls:
            poll_id, options = poll[0], json.loads(poll[1])

            await cursor.execute('SELECT option_id, MAX(votes) FROM poll_results WHERE poll_id = ?', (poll_id,))
            winner = await cursor.fetchone()

            if winner is not None:
                winners_text = options[winner[0]]
                results_text.append(winners_text)

        if len(results_text) >= 2:
            await bot.send_message(-1001646936147, f'‚ô®Ô∏è–£–≤–∞–∂–µ–º—ã–µ –ø—Ä–∏—á–∞—Å—Ç–Ω—ã–µ! –î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏!‚ô®Ô∏è\n\n'
                                   f'–ö–æ–≥–¥–∞: {results_text[0]}\n{results_text[1]}')
        else:
            await bot.send_message(-1001646936147, '–ù–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.')

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞
        await cursor.execute('DELETE FROM poll_data')
        await cursor.execute('DELETE FROM poll_results')

        await db.commit()

if __name__ == '__main__':
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_poll, CronTrigger(day_of_week='mon', hour=13, minute=32))
    scheduler.add_job(check_poll_results, CronTrigger(day_of_week='fri', hour=13))
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
